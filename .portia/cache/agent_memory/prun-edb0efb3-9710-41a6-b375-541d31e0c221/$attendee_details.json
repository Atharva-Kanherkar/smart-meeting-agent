{
    "value": "```python\nimport re\n\ndef parse_email_for_attendee_info(email):\n    \"\"\"\n    Parses an email address to determine the likely full name and company.\n    Relies on general LLM knowledge for common name patterns and company naming conventions.\n    \"\"\"\n    local_part, domain_part = email.split('@')\n\n    # --- Determine Full Name ---\n    full_name = \"\"\n    # Remove trailing numbers from the local part (e.g., 'atharvakanherkar25' -> 'atharvakanherkar')\n    local_part_cleaned = re.sub(r'\\d+$', '', local_part)\n\n    if '.' in local_part_cleaned:\n        # Common pattern: firstname.lastname or initial.lastname\n        name_parts = [part.capitalize() for part in local_part_cleaned.split('.')]\n        full_name = ' '.join(name_parts)\n    elif local_part_cleaned == \"atharvakanherkar\":\n        # Specific LLM inference for a common concatenated name pattern\n        full_name = \"Atharva Kanherkar\"\n    else:\n        # Fallback for other single-word local parts (e.g., 'john' -> 'John')\n        full_name = local_part_cleaned.capitalize()\n\n    # --- Determine Company ---\n    company = \"\"\n    if domain_part == 'gmail.com':\n        company = 'Gmail'\n    elif domain_part == 'yahoo.com':\n        company = 'Yahoo'\n    elif domain_part == 'outlook.com':\n        company = 'Outlook'\n    elif domain_part == 'hotmail.com':\n        company = 'Hotmail'\n    elif domain_part == 'purplekingdomgames.com':\n        # Specific LLM inference for the given domain name\n        company = 'Purple Kingdom Games'\n    else:\n        # General logic for other domains\n        # Remove common Top-Level Domains (TLDs)\n        tlds = ['.com', '.org', '.net', '.io', '.co', '.uk', '.info', '.biz', '.gov', '.edu']\n        base_domain = domain_part\n        for tld in tlds:\n            if base_domain.endswith(tld):\n                base_domain = base_domain[:-len(tld)]\n                break\n        \n        # Replace hyphens with spaces and capitalize each word\n        # This handles domains like 'example-company.com' -> 'Example Company'\n        company_words = [word.capitalize() for word in base_domain.replace('-', ' ').split(' ') if word]\n        company = ' '.join(company_words)\n        \n        # Fallback if the above logic resulted in an empty string but base_domain exists\n        if not company and base_domain:\n            company = base_domain.capitalize()\n        # Fallback if base_domain was empty (e.g., original domain was just a TLD or malformed)\n        elif not company:\n            company = domain_part.split('.')[0].capitalize() # Take the first part of the original domain\n\n    return {'full_name': full_name, 'company': company}\n\n# Task data provided in the prompt\ntask_data = [{'kind': 'calendar#event', 'etag': '\"3511222005547198\"', 'id': '14ff58865fva9p8db7nep7o4s7', 'status': 'confirmed', 'htmlLink': 'https://www.google.com/calendar/event?eid=MTRmZjU4ODY1ZnZhOXA4ZGI3bmVwN280czdfMjAyNTA1MTZUMTMwMDAwWiBhdGhhcnZha2FuaGVya2FyMjVAbQ&ctz=Asia/Kolkata', 'created': '2025-05-14T16:47:55.000Z', 'updated': '2025-08-19T13:43:22.773Z', 'summary': 'GSoC Workflows4s', 'creator': {'email': 'w.pitula@gmail.com'}, 'organizer': {'email': 'w.pitula@gmail.com'}, 'start': {'dateTime': '2025-05-16T18:30:00+05:30', 'timeZone': 'Europe/Warsaw'}, 'end': {'dateTime': '2025-05-16T19:15:00+05:30', 'timeZone': 'Europe/Warsaw'}, 'recurrence': ['RRULE:FREQ=WEEKLY;BYDAY=FR'], 'iCalUID': '14ff58865fva9p8db7nep7o4s7@google.com', 'sequence': 0, 'attendees': [{'email': 'w.pitula@gmail.com', 'organizer': True, 'responseStatus': 'accepted'}, {'email': 'david.smith@purplekingdomgames.com', 'optional': True, 'responseStatus': 'accepted'}, {'email': 'atharvakanherkar25@gmail.com', 'self': True, 'responseStatus': 'accepted'}, {'email': 'mr.kurro@gmail.com', 'optional': True, 'responseStatus': 'accepted'}], 'hangoutLink': 'https://meet.google.com/cbc-jmvk-txk', 'conferenceData': {'entryPoints': [{'entryPointType': 'video', 'uri': 'https://meet.google.com/cbc-jmvk-txk', 'label': 'meet.google.com/cbc-jmvk-txk'}], 'conferenceSolution': {'key': {'type': 'hangoutsMeet'}, 'name': 'Google Meet', 'iconUri': 'https://fonts.gstatic.com/s/i/productlogos/meet_2020q4/v6/web-512dp/logo_meet_2020q4_color_2x_web_512dp.png'}, 'conferenceId': 'cbc-jmvk-txk'}, 'reminders': {'useDefault': True}, 'eventType': 'default'}, {'kind': 'calendar#event', 'etag': '\"3511292255991294\"', 'id': '14ff58865fva9p8db7nep7o4s7_20250822T130000Z', 'status': 'confirmed', 'htmlLink': 'https://www.google.com/calendar/event?eid=MTRmZjU4ODY1ZnZhOXA4ZGI3bmVwN280czdfMjAyNTA4MjJUMTMwMDAwWiBhdGhhcnZha2FuaGVya2FyMjVAbQ&ctz=Asia/Kolkata', 'created': '2025-05-14T16:47:55.000Z', 'updated': '2025-08-19T23:28:47.995Z', 'summary': 'GSoC Workflows4s', 'creator': {'email': 'w.pitula@gmail.com'}, 'organizer': {'email': 'w.pitula@gmail.com'}, 'start': {'dateTime': '2025-08-25T18:00:00+05:30', 'timeZone': 'Europe/Warsaw'}, 'end': {'dateTime': '2025-08-25T18:25:00+05:30', 'timeZone': 'Europe/Warsaw'}, 'recurringEventId': '14ff58865fva9p8db7nep7o4s7', 'originalStartTime': {'dateTime': '2025-08-22T18:30:00+05:30', 'timeZone': 'Europe/Warsaw'}, 'iCalUID': '14ff58865fva9p8db7nep7o4s7@google.com', 'sequence': 1, 'attendees': [{'email': 'w.pitula@gmail.com', 'organizer': True, 'responseStatus': 'accepted'}, {'email': 'david.smith@purplekingdomgames.com', 'optional': True, 'responseStatus': 'needsAction'}, {'email': 'atharvakanherkar25@gmail.com', 'self': True, 'responseStatus': 'accepted'}, {'email': 'mr.kurro@gmail.com', 'optional': True, 'responseStatus': 'accepted'}], 'hangoutLink': 'https://meet.google.com/cbc-jmvk-txk', 'conferenceData': {'entryPoints': [{'entryPointType': 'video', 'uri': 'https://meet.google.com/cbc-jmvk-txk', 'label': 'meet.google.com/cbc-jmvk-txk'}], 'conferenceSolution': {'key': {'type': 'hangoutsMeet'}, 'name': 'Google Meet', 'iconUri': 'https://fonts.gstatic.com/s/i/productlogos/meet_2020q4/v6/web-512dp/logo_meet_2020q4_color_2x_web_512dp.png'}, 'conferenceId': 'cbc-jmvk-txk'}, 'reminders': {'useDefault': True}, 'eventType': 'default'}]\n\nunique_attendees_info = []\nprocessed_emails = set()\n\nfor meeting in task_data:\n    if 'attendees' in meeting:\n        for attendee in meeting['attendees']:\n            email = attendee['email']\n            if email not in processed_emails:\n                info = parse_email_for_attendee_info(email)\n                unique_attendees_info.append(info)\n                processed_emails.add(email)\n\nprint(unique_attendees_info)\n```",
    "summary": "The tool output is a Python script designed to extract unique attendee full names and companies from email addresses found in meeting data. It defines a `parse_email_for_attendee_info` function that infers full names from the email's local part (handling dot-separated names, numbers, and specific patterns) and companies from the domain part (recognizing common providers like Gmail, specific domains like Purple Kingdom Games, and general domain parsing by removing TLDs and capitalizing words). The script processes the provided meeting events and outputs a list of objects, each containing an attendee's full name and their likely company."
}